Q. When would you want to use a remote repository rather than keeping all your work local?
A. When you're working on the same project from more than one computer. However, even if
   you're working on a single computer, it's a good idea to have a copy of your project
   saved in the cloud, just in case.

Q. Why might you want to always pull changes manually rather than having Git
   automatically stay up-to-date with your remote repository?
A. You don't want changes coming down that will break what you are working on.

Q. Describe the differences between forks, clones, and branches. When would you use one
   instead of another?
A. A fork is a clone of a repository made from github to github. A clone is a copy
   of a repository made from a remote repository to a local repository on your
   computer (or from a local repository to another local repository). A branch is
   a label of a particular state, usually done so you can work on a bug fix or
   feature without affecting the master branch. You often use fork so you can
   work on someone else's code (where you don't have permission to push back to).
   You usually use clone to pull the code down from a remote repository to your
   local machine so you can modify and test locally. Branches are for
   segregating bug fixes and features from the main master branch during
   development.

Q. What is the benefit of having a copy of the last known state of the remote
   stored locally?
A. You can work offline and still have the latest code from the remote
   repository available.

Q. How would you collaborate without using Git or GitHub? What would be easier,
   and what would be harder?
A. You could use a different version control system. Or you could just do
   everything manually. It would be easier because you'd have less to learn,
   but you wouldn't have all the powerful tool for labeling, branching and
   merging that version control provides. Git and GitHub are just the latest
   such tools.

Q. When would you want to make changes in a separate branch rather than
   directly in master? What benefits does each approach have?
A. Didn't I already answer this question? It's easier just to keep
   everything in master, but branches are nice for bug fixing and new
   features, so that the master branch is always stable. Branches are
   also good when you're collaborating with others, so it's easier to
   pull down just the changes you want.
